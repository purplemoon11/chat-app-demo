<!DOCTYPE html>
<html>
  <head>
    <title>Chat</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css"
    />
    <style>
      .message {
        display: flex;
        justify-content: flex-start;
        margin-bottom: 10px;
      }
      .message.sent {
        justify-content: flex-end;
      }
      .message-content {
        padding: 10px;
        border-radius: 10px;
        max-width: 60%;
        background-color: #f1f1f1;
        word-wrap: break-word;
      }
      .message.sent .message-content {
        background-color: #d1e7dd;
      }
    </style>
  </head>
  <body>
    <div class="container mt-5">
      <h2 class="text-center">Chat</h2>

      <!-- Search bar -->
      <form id="searchForm" class="mb-4">
        <div class="input-group">
          <input
            type="text"
            id="searchInput"
            class="form-control"
            placeholder="Search messages..."
            aria-label="Search messages"
          />
          <button type="submit" class="btn btn-secondary">Search</button>
        </div>
      </form>

      <!-- Messages display -->
      <div id="messages" class="mb-4">
        <p>No messages yet.</p>
      </div>

      <!-- Form to send a new message -->
      <form id="messageForm">
        <div class="mb-3">
          <label for="content" class="form-label">Message</label>
          <input
            type="text"
            class="form-control"
            id="content"
            name="content"
            required
          />
        </div>
        <button type="submit" class="btn btn-primary">Send</button>
      </form>

      <!-- Include Socket.io client script -->
      <script src="/socket.io/socket.io.js"></script>
      <script>
        const socket = io();

        // Function to load messages initially
        async function loadMessages() {
          const token = localStorage.getItem("authToken");

          try {
            const response = await fetch("/api/v1/message", {
              headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${token}`,
              },
            });

            const data = await response.json();
            if (response.ok) {
              displayMessages(data.messages, data.currentUser);
            } else {
              console.error("Failed to load messages:", data.message);
            }
          } catch (error) {
            console.error("Error loading messages:", error);
          }
        }

        // Function to display messages
        function displayMessages(messages, currentUser) {
          const messagesDiv = document.getElementById("messages");
          messagesDiv.innerHTML = "";

          messages.forEach((message) => {
            if (!message.sender || !message.sender._id) {
              console.error(
                "Message sender data is missing or incomplete:",
                message
              );
              return;
            }

            const messageDiv = document.createElement("div");
            messageDiv.className = `message ${
              message.sender._id === currentUser ? "sent" : ""
            }`;
            messageDiv.innerHTML = `<div class="message-content"><strong>${message.sender.fullName}:</strong> ${message.content}</div>`;
            messagesDiv.appendChild(messageDiv);
          });
        }

        // Handle incoming real-time messages
        socket.on("message", (messageData) => {
          const messagesDiv = document.getElementById("messages");
          const messageDiv = document.createElement("div");
          messageDiv.className = `message ${
            messageData.sender._id === localStorage.getItem("userId")
              ? "sent"
              : ""
          }`;
          messageDiv.innerHTML = `<div class="message-content"><strong>${messageData.sender.fullName}:</strong> ${messageData.content}</div>`;
          messagesDiv.appendChild(messageDiv);
        });

        // Send message event
        document
          .getElementById("messageForm")
          .addEventListener("submit", function (event) {
            event.preventDefault();
            const content = document.getElementById("content").value;
            const senderId = localStorage.getItem("userId");

            if (!senderId) {
              console.error("Sender ID is missing.");
              return;
            }

            socket.emit("sendMessage", { senderId, content });

            document.getElementById("content").value = "";
          });

        // Search messages event
        document
          .getElementById("searchForm")
          .addEventListener("submit", async function (event) {
            event.preventDefault();
            const searchTerm = document.getElementById("searchInput").value;
            const token = localStorage.getItem("authToken");

            try {
              const response = await fetch(
                `/api/v1/message/search?q=${searchTerm}`,
                {
                  headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`,
                  },
                }
              );

              const data = await response.json();
              if (response.ok) {
                displayMessages(data.messages, data.currentUser);
              } else {
                console.error("Failed to search messages:", data.message);
              }
            } catch (error) {
              console.error("Error searching messages:", error);
            }
          });

        // Load messages on page load
        document.addEventListener("DOMContentLoaded", loadMessages);
      </script>
    </div>
  </body>
</html>
